@page
@using Learning.NET.Compenents;
@using Learning.NET.models;
@using Learning.NET.services;
@using Learning.NET.Controller;
@inject JsonFileProductService ProductService;
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Featured</h1>

</div>

<div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
    <div class="carousel-inner">
        <div class="carousel-item active">
            <img src="https://sfzone1-legalbrandmarket.netdna-ssl.com/wp-content/uploads/2019/08/terminator-dark-fate-e1567536302590.jpg" height="400" class="d-block w-100" alt="...">
        </div>
        <div class="carousel-item">
            <img src="https://fanart.tv/fanart/movies/453405/moviethumb/gemini-man-5da9582a1b0b8.jpg" height="400" class="d-block w-100" alt="...">
        </div>
        <div class="carousel-item">
            <img src="https://content.hungama.com/movie/display%20image/1280x800%20jpeg/6074703549.jpg" height="400" class="d-block w-100" alt="...">
        </div>
    </div>
    <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
    <br />
    <br />
</div>

<div class="card-columns">



    @foreach (var product in ProductService.GetProducts())
    {
        <div class="card">
            <div class="card-img" style="background-image: url('@product.Img');">
            </div>

            <div class="card-body">
                <h5 class="card-title">@product.Title</h5>

            </div>

            <div class="card-footer">
                <button class="btn btn-primary" onclick="ShowPopup(@product.Id)">view</button>
            </div>
        </div>

        <!-- Modal -->
        <div class="modal fade" id="@product.Id" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="card-img" id="@product.Id" style="background-image: url('@product.Img');">
                        </div>

                    </div>
                    <div class="modal-footer">
                        <div>
                            <p class="card-text"> @product.Description</p>
                        </div>
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" href="#linkToSeats"> Book</button>
                    </div>
                </div>
            </div>
        </div>


    }


    <script>
        function ShowPopup(productId) {
            $(productId).modal('show');

        }
        ScriptManager.RegisterStartupScript(this, this.GetType(), "none", "ShowPopup();", true);
    </script>


</div>

      



@{
    Product selectedProduct;
    string selectedProductId;

   
    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }
        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");

    }


    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }


}
